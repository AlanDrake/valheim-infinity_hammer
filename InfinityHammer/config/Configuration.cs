using System.Collections.Generic;
using System.Linq;
using BepInEx.Configuration;
using Service;
namespace InfinityHammer;
public partial class Configuration {
#nullable disable
  public static bool IsCheats => Enabled && ((ZNet.instance && ZNet.instance.IsServer()) || Console.instance.IsCheatsEnabled());

  public static ConfigEntry<bool> configNoBuildCost;
  public static bool NoBuildCost => configNoBuildCost.Value && IsCheats;
  public static ConfigEntry<bool> configIgnoreWards;
  public static bool IgnoreWards => configIgnoreWards.Value && IsCheats;
  public static ConfigEntry<bool> configIgnoreNoBuild;
  public static bool IgnoreNoBuild => configIgnoreNoBuild.Value && IsCheats;
  public static ConfigEntry<bool> configNoStaminaCost;
  public static bool NoStaminaCost => configNoStaminaCost.Value && IsCheats;
  public static ConfigEntry<bool> configNoDurabilityLoss;
  public static bool NoDurabilityLoss => configNoDurabilityLoss.Value && IsCheats;
  public static ConfigEntry<bool> configAllObjects;
  public static bool AllObjects => configAllObjects.Value && IsCheats;
  public static ConfigEntry<bool> configCopyState;
  public static bool CopyState => configCopyState.Value && IsCheats;
  public static ConfigEntry<bool> configAllowInDungeons;
  public static bool AllowInDungeons => configAllowInDungeons.Value && IsCheats;
  public static ConfigEntry<bool> configIgnoreOtherRestrictions;
  public static bool IgnoreOtherRestrictions => configIgnoreOtherRestrictions.Value && IsCheats;
  public static ConfigEntry<bool> configRemoveAnything;
  public static bool RemoveAnything => configRemoveAnything.Value && IsCheats;
  public static ConfigEntry<bool> configDisableMessages;
  public static bool DisableMessages => configDisableMessages.Value;
  public static ConfigEntry<bool> configDisableSelectMessages;
  public static bool DisableSelectMessages => configDisableSelectMessages.Value;
  public static ConfigEntry<bool> configDisableOffsetMessages;
  public static bool DisableOffsetMessages => configDisableOffsetMessages.Value;
  public static ConfigEntry<bool> configDisableScaleMessages;
  public static bool DisableScaleMessages => configDisableScaleMessages.Value;
  public static ConfigEntry<bool> configChatOutput;
  public static bool ChatOutput => configChatOutput.Value;
  public static ConfigEntry<bool> configDisableLoot;
  public static bool DisableLoot => configDisableLoot.Value && IsCheats;
  public static ConfigEntry<bool> configRepairAnything;
  public static bool RepairAnything => configRepairAnything.Value && IsCheats;
  public static ConfigEntry<bool> configEnableUndo;
  public static bool EnableUndo => configEnableUndo.Value && IsCheats;
  public static ConfigEntry<bool> configNoCreator;
  public static bool NoCreator => configNoCreator.Value && IsCheats;
  public static ConfigEntry<bool> configResetOffsetOnUnfreeze;
  public static bool ResetOffsetOnUnfreeze => configResetOffsetOnUnfreeze.Value;
  public static ConfigEntry<bool> configUnfreezeOnUnequip;
  public static bool UnfreezeOnUnequip => configUnfreezeOnUnequip.Value;
  public static ConfigEntry<bool> configUnfreezeOnSelect;
  public static bool UnfreezeOnSelect => configUnfreezeOnSelect.Value;
  public static ConfigEntry<string> configOverwriteHealth;
  public static float OverwriteHealth => IsCheats ? InfiniteHealth ? 1E30f : Helper.ParseFloat(configOverwriteHealth.Value, 0f) : 0f;
  public static ConfigEntry<string> configPlanBuildFolder;
  public static string PlanBuildFolder => configPlanBuildFolder.Value;
  public static ConfigEntry<string> configBuildShareFolder;
  public static string BuildShareFolder => configBuildShareFolder.Value;
  public static ConfigEntry<bool> configInfiniteHealth;
  public static bool InfiniteHealth => configInfiniteHealth.Value && IsCheats;
  public static ConfigEntry<bool> configCopyRotation;
  public static bool CopyRotation => configCopyRotation.Value && Enabled;
  public static ConfigEntry<string> configRemoveArea;
  public static float RemoveArea => Enabled ? Helper.ParseFloat(configRemoveArea.Value, 0f) : 0f;
  public static ConfigEntry<string> configSelectRange;
  public static float SelectRange => Enabled ? Helper.ParseFloat(configSelectRange.Value, 0f) : 0f;
  public static ConfigEntry<string> configRemoveRange;
  public static float RemoveRange => IsCheats ? Helper.ParseFloat(configRemoveRange.Value, 0f) : 0f;
  public static ConfigEntry<string> configRepairRange;
  public static float RepairRange => IsCheats ? Helper.ParseFloat(configRepairRange.Value, 0f) : 0f;
  public static ConfigEntry<string> configBuildRange;
  public static float BuildRange => IsCheats ? Helper.ParseFloat(configBuildRange.Value, 0f) : 0f;
  public static ConfigEntry<bool> configRemoveEffects;
  public static bool RemoveEffects => configRemoveEffects.Value && Enabled;
  public static ConfigEntry<bool> configRepairTaming;
  public static bool RepairTaming => configRepairTaming.Value && IsCheats;
  public static ConfigEntry<bool> configHidePlacementMarker;
  public static bool HidePlacementMarker => configHidePlacementMarker.Value && Enabled;
  public static ConfigEntry<bool> configEnabled;
  public static bool Enabled => configEnabled.Value;
  public static ConfigEntry<bool> configServerDevcommandsUndo;
  public static bool ServerDevcommandsUndo => configServerDevcommandsUndo.Value;
  private static HashSet<string> ParseList(string value) => value.Split(',').Select(s => s.Trim().ToLower()).ToHashSet();
  public static ConfigEntry<string> configRemoveBlacklist;
  public static HashSet<string> RemoveBlacklist = new();
  public static ConfigEntry<string> configSelectBlacklist;
  public static HashSet<string> SelectBlacklist = new();
  public static ConfigEntry<string> configHammerTools;
  public static HashSet<string> HammerTools = new();
  public static ConfigEntry<string> configHoeTools;
  public static HashSet<string> HoeTools = new();
  public static ConfigWrapper Wrapper;
#nullable enable
  private static void UpdateTools() {
    HammerTools = ParseList(configHammerTools.Value);
    HoeTools = ParseList(configHoeTools.Value);
  }
  public static void Init(ConfigWrapper wrapper) {
    Wrapper = wrapper;
    var section = "1. General";
    configEnabled = wrapper.Bind(section, "Enabled", true, "Whether this mod is enabled at all.");
    configHammerTools = wrapper.BindList(section, "Hammer tools", "hammer", "List of hammers.");
    configHammerTools.SettingChanged += (s, e) => UpdateTools();
    configHoeTools = wrapper.Bind(section, "Hoe tools", "hoe", "List of hoes.");
    configHoeTools.SettingChanged += (s, e) => UpdateTools(); UpdateTools();
    if (CommandWrapper.ServerDevcommands != null)
      configServerDevcommandsUndo = wrapper.Bind(section, "Server Devcommands undo", true, "If disabled, uses Infinity Hammer's own undo system even if Server Devcommands is installed.");
    configPlanBuildFolder = wrapper.Bind(section, "Plan Build folder", "BepInEx/config/PlanBuild", "Folder relative to the Valheim.exe.");
    configBuildShareFolder = wrapper.Bind(section, "Build Share folder", "BuildShare/Builds", "Folder relative to the Valheim.exe.");
    if (CommandWrapper.ServerDevcommands != null)
      InitBinds(wrapper);
    section = "3. Powers";
    configRemoveArea = wrapper.Bind(section, "Remove area", "0", "Removes same objects within the radius.");
    configSelectRange = wrapper.Bind(section, "Select range", "50", "Range for selecting objects.");
    configRemoveRange = wrapper.Bind(section, "Remove range", "0", "Range for removing objects (0 = default).");
    configRepairRange = wrapper.Bind(section, "Repair range", "0", "Range for repairing objects (0 = default).");
    configBuildRange = wrapper.Bind(section, "Build range", "0", "Range for placing objects (0 = default)");
    configRepairTaming = wrapper.Bind(section, "Repair taming", false, "Repairing full health creatures tames/untames them.");
    configRemoveEffects = wrapper.Bind(section, "Remove effects", false, "Removes visual effects of building, etc.");
    configEnableUndo = wrapper.Bind(section, "Enable undo", true, "Enabled undo and redo for placing/removing.");
    configCopyRotation = wrapper.Bind(section, "Copy rotation", true, "Copies rotation of the selected object.");
    configNoBuildCost = wrapper.Bind(section, "No build cost", true, "Removes build costs and requirements.");
    configIgnoreWards = wrapper.Bind(section, "Ignore wards", true, "Ignores ward restrictions.");
    configIgnoreNoBuild = wrapper.Bind(section, "Ignore no build", true, "Ignores no build areas.");
    configNoStaminaCost = wrapper.Bind(section, "No stamina cost", true, "Removes hammer stamina usage.");
    configNoDurabilityLoss = wrapper.Bind(section, "No durability loss", true, "Removes hammer durability usage.");
    configAllObjects = wrapper.Bind(section, "All objects", true, "Allows placement of non-default objects.");
    configCopyState = wrapper.Bind(section, "Copy state", true, "Copies object's internal state.");
    configAllowInDungeons = wrapper.Bind(section, "Allow in dungeons", true, "Allows building in dungeons.");
    configRemoveAnything = wrapper.Bind(section, "Remove anything", false, "Allows removing anything.");
    configDisableLoot = wrapper.Bind(section, "Disable loot", false, "Prevents creatures and structures dropping loot when removed with the hammer.");
    configRepairAnything = wrapper.Bind(section, "Repair anything", false, "Allows reparing anything.");
    configOverwriteHealth = wrapper.Bind(section, "Overwrite health", "0", "Overwrites the health of built or repaired objects.");
    configInfiniteHealth = wrapper.Bind(section, "Infinite health", false, "Sets the Overwrite health to 1E30.");
    configNoCreator = wrapper.Bind(section, "No creator", false, "Build without setting the creator.");
    configUnfreezeOnSelect = wrapper.Bind(section, "Unfreeze on select", false, "Removes the placement freeze when selecting a new object.");
    configResetOffsetOnUnfreeze = wrapper.Bind(section, "Reset offset on unfreeze", true, "Removes the placement offset when unfreezing the placement.");
    configUnfreezeOnUnequip = wrapper.Bind(section, "Unfreeze on unequip", true, "Removes the placement freeze when unequipping the hammer.");
    configHidePlacementMarker = wrapper.Bind(section, "No placement marker", false, "Hides the yellow placement marker (also affects Gizmo mod).");
    configIgnoreOtherRestrictions = wrapper.Bind(section, "Ignore other restrictions", true, "Ignores any other restrictions (material, biome, etc.)");
    section = "4. Items";
    configRemoveBlacklist = wrapper.BindList(section, "Remove blacklist", "", "Object ids separated by , that can't be removed.");
    configRemoveBlacklist.SettingChanged += (s, e) => RemoveBlacklist = ParseList(configRemoveBlacklist.Value);
    RemoveBlacklist = ParseList(configRemoveBlacklist.Value);
    configSelectBlacklist = wrapper.BindList(section, "Select blacklist", "", "Object ids separated by , that can't be selected.");
    configSelectBlacklist.SettingChanged += (s, e) => SelectBlacklist = ParseList(configSelectBlacklist.Value);
    SelectBlacklist = ParseList(configSelectBlacklist.Value);
    section = "5. Messages";
    configDisableMessages = wrapper.Bind(section, "Disable messages", false, "Disables all messages from this mod.");
    configDisableOffsetMessages = wrapper.Bind(section, "Disable offset messages", false, "Disables messages from changing placement offset.");
    configDisableScaleMessages = wrapper.Bind(section, "Disable scale messages", false, "Disables messages from changing the scale.");
    configDisableSelectMessages = wrapper.Bind(section, "Disable select messages", false, "Disables messages from selecting objects.");
    configChatOutput = wrapper.Bind(section, "Chat output", false, "Sends messages to the chat window from bound keys.");
    InitCommands(wrapper);
  }
}
